cmake_minimum_required(VERSION 2.8)

project(libeternity)

# options
option(USE_OPENGL "Build the OpenGL renderer" ON)
set (CMAKE_CXX_STANDARD 11)

# general setup
find_library(LIBRARY_CLANG clang "${CMAKE_SOURCE_DIR}/Source/ThirdParty/clang/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_GLFW glfw3 PATHS "${CMAKE_SOURCE_DIR}/Source/ThirdParty/glfw/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_BASE v8_base "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_SNAPSHOT v8_external_snapshot "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_ICUI8N icui18n "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_ICUUC icuuc "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_LIBBASE v8_libbase "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_LIBPLATFORM v8_libplatform "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_LIBSAMPLER v8_libsampler "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_V8_EXTSNAPSHOT v8_external_snapshot "${CMAKE_SOURCE_DIR}/Source/ThirdParty/v8/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_SOIL soil "${CMAKE_SOURCE_DIR}/Source/ThirdParty/soil/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_BULLET_COLLISION BulletCollision "${CMAKE_SOURCE_DIR}/Source/ThirdParty/bullet/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_BULLET_DYNAMICS BulletDynamics "${CMAKE_SOURCE_DIR}/Source/ThirdParty/bullet/lib" NO_DEFAULT_PATH)
find_library(LIBRARY_BULLET_LINEARMATH LinearMath "${CMAKE_SOURCE_DIR}/Source/ThirdParty/bullet/lib" NO_DEFAULT_PATH)

# set the output directory without the /Debug/ and /Release/ equivalents
foreach( OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES} )
    string( TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG )
    set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR} )
    set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR} )
    set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR} )
endforeach( OUTPUTCONFIG CMAKE_CONFIGURATION_TYPES )

# create metacode output directory
file(MAKE_DIRECTORY "${CMAKE_SOURCE_DIR}/Source/Autogenerated")

# create stub file
file(WRITE "${CMAKE_SOURCE_DIR}/Source/Autogenerated/Metadata.cpp" "// Autogenerated stub file")

# metacode generator
set (GENERATOR_INCLUDE_DIRS "")
list (APPEND GENERATOR_INCLUDE_DIRS "Source/Generator")
list (APPEND GENERATOR_INCLUDE_DIRS "Source/ThirdParty/clang/include")

add_executable(generator Source/Generator/main.cpp Source/Generator/Directory.cpp)

target_include_directories(generator PRIVATE ${GENERATOR_INCLUDE_DIRS})
target_link_libraries(generator ${LIBRARY_CLANG})

# create the execution as a custom target
add_custom_target(
	generator-prebuild
	COMMAND $<TARGET_FILE:generator> "${CMAKE_SOURCE_DIR}/Source/Workspace/eternity"
)

# main eternity library
set (ETERNITY_SOURCE_FILES "")

macro (list_source_files dir)
	file (GLOB CPP_FILES "${dir}/*.cpp")
	file (GLOB H_FILES "${dir}/*.h")
	
	list (APPEND ETERNITY_SOURCE_FILES ${CPP_FILES})
	list (APPEND ETERNITY_SOURCE_FILES ${H_FILES})
endmacro()

macro (group_source_files folder dir)
	file (GLOB CPP_FILES "${dir}/*.cpp")
	file (GLOB H_FILES "${dir}/*.h")
	
	source_group("${folder}" FILES ${CPP_FILES} ${H_FILES})
endmacro()

list_source_files("Source/Engine/Core")
list_source_files("Source/Engine/IO")
list_source_files("Source/Engine/Network")
list_source_files("Source/Engine/Render")
list_source_files("Source/Engine/Render/DeferredRenderer")
IF(USE_OPENGL)
	list_source_files("Source/Engine/Render/OpenGL")
ENDIF()
list_source_files("Source/Engine/Scripting")
list_source_files("Source/Engine/Physics")

set (ETERNITY_INCLUDE_DIRS "")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/Engine")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/v8/include")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/glfw/include")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/glm/include")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/glew/include")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/soil/include")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/bullet/include")
list (APPEND ETERNITY_INCLUDE_DIRS "Source/ThirdParty/sqlite/include")

set (ETERNITY_LIBS "")
list (APPEND ETERNITY_LIBS ${LIBRARY_GLFW})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_ICUI8N})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_ICUUC})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_BASE})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_LIBBASE})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_LIBPLATFORM})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_LIBSAMPLER})
list (APPEND ETERNITY_LIBS ${LIBRARY_V8_EXTSNAPSHOT})
list (APPEND ETERNITY_LIBS ${LIBRARY_SOIL})
list (APPEND ETERNITY_LIBS ${LIBRARY_BULLET_COLLISION})
list (APPEND ETERNITY_LIBS ${LIBRARY_BULLET_DYNAMICS})
list (APPEND ETERNITY_LIBS ${LIBRARY_BULLET_LINEARMATH})

IF(WIN32)
	list (APPEND ETERNITY_LIBS "legacy_stdio_definitions.lib")
	list (APPEND ETERNITY_LIBS "OpenGL32.lib")
	list (APPEND ETERNITY_LIBS "WS2_32.lib")
	list (APPEND ETERNITY_LIBS "WinMM.Lib")
	list (APPEND ETERNITY_LIBS "AdvAPI32.Lib")
	list (APPEND ETERNITY_LIBS "Crypt32.Lib")
	list (APPEND ETERNITY_LIBS "Dbghelp.lib")
	list (APPEND ETERNITY_LIBS "ShLwApi.Lib")
ENDIF()

IF(APPLE)
	list (APPEND ETERNITY_LIBS "-framework IOKit")
	list (APPEND ETERNITY_LIBS "-framework Cocoa")
	list (APPEND ETERNITY_LIBS "-framework CoreVideo")
	list (APPEND ETERNITY_LIBS "-framework CoreAudio")
	list (APPEND ETERNITY_LIBS "-framework OpenGL")
	list (APPEND ETERNITY_LIBS "-framework Security")
ENDIF()

add_library(eternity STATIC ${ETERNITY_SOURCE_FILES} Source/ThirdParty/glew/src/glew.c Source/ThirdParty/sqlite/src/sqlite3.c Source/Autogenerated/Metadata.cpp)
group_source_files("Core" "Source/Engine/Core")
group_source_files("IO" "Source/Engine/IO")
group_source_files("Network" "Source/Engine/Network")
group_source_files("Render" "Source/Engine/Render")
group_source_files("Render\\\\OpenGL" "Source/Engine/Render/OpenGL")
group_source_files("Render\\\\DeferredRenderer" "Source/Engine/Render/DeferredRenderer")
group_source_files("Scripting" "Source/Engine/Scripting")
group_source_files("Platform" "Source/Engine/Platform")
group_source_files("Metadata" "Source/Autogenerated")
group_source_files("Physics" "Source/Engine/Physics")

set_property(TARGET eternity APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_API=")
set_property(TARGET eternity APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
set_property(TARGET eternity APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")

target_link_libraries(eternity ${ETERNITY_LIBS})
target_include_directories(eternity PRIVATE ${ETERNITY_INCLUDE_DIRS})

add_dependencies(eternity generator-prebuild)

# game client

add_executable(game Source/Game/main.cpp)

set_property(TARGET game APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_API=")
set_property(TARGET game APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
set_property(TARGET game APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")

target_link_libraries(game "eternity" ${ETERNITY_LIBS})
target_include_directories(game PRIVATE ${ETERNITY_INCLUDE_DIRS})
add_dependencies(game eternity)

# game server

set (ETERNITY_SOURCE_FILES "")

list_source_files("Source/Engine/Core")
list_source_files("Source/Engine/IO")
list_source_files("Source/Engine/Network")
list_source_files("Source/Engine/Render")
list_source_files("Source/Engine/Scripting")
list_source_files("Source/Engine/Physics")

add_executable(server Source/Server/main.cpp ${ETERNITY_SOURCE_FILES} Source/Autogenerated/Metadata.cpp Source/ThirdParty/sqlite/src/sqlite3.c)

set_property(TARGET server APPEND PROPERTY COMPILE_DEFINITIONS "GIGA_API=")
set_property(TARGET server APPEND PROPERTY COMPILE_DEFINITIONS "GLEW_STATIC")
set_property(TARGET server APPEND PROPERTY COMPILE_DEFINITIONS "_CRT_SECURE_NO_WARNINGS")

target_link_libraries(server "eternity" ${ETERNITY_LIBS})
target_include_directories(server PRIVATE ${ETERNITY_INCLUDE_DIRS})
add_dependencies(server eternity)
